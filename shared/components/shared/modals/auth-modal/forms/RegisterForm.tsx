'use client';

import React from 'react';
import toast from 'react-hot-toast';
import { FormProvider, useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { TFormRegisterValues, formRegisterSchema } from './schemas';
import { FormInput } from '../../../form';
import { Button } from '@/shared/components/ui';
import { registerUser } from '@/app/actions/users/registerUser';

interface Props {
  onClose?: VoidFunction;
}

export const RegisterForm: React.FC<Props> = ({ onClose }) => {
  const form = useForm<TFormRegisterValues>({
    resolver: zodResolver(formRegisterSchema),
    defaultValues: {
      email: '',
      fullName: '',
      password: '',
      confirmPassword: '',
    },
  });

  const onSubmit = async (data: TFormRegisterValues) => {
    try {
      const result = await registerUser({
        email: data.email,
        fullName: data.fullName,
        password: data.password,
      });

      if (result?.error) {
        if (result.type === 'ACCOUNT_IS_NOT_VERIFIED') {
          return toast.error(`${result.message}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ—á—Ç—É`, {
            icon: '‚ùå',
          });
        }
        if (result.type === 'ACCOUNT_ALREADY_EXISTS') {
          return toast.error(`${result.message}. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Å–æ—Ü—Å–µ—Ç–∏`, {
            icon: '‚ùå',
          });
        }
      }

      toast.success('–í—ã –ø–æ—á—Ç–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å üìù. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É');
      onClose?.();
    } catch (error) {
      // –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö/–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
      toast.error('–í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å E-Mail –∏–ª–∏ –ø–∞—Ä–æ–ª—è', {
        icon: '‚ùå',
      });
    }
  };

  return (
    <FormProvider {...form}>
      <form className="flex flex-col gap-5" onSubmit={form.handleSubmit(onSubmit)}>
        <FormInput name="email" label="E-Mail" required />
        <FormInput name="fullName" label="–ü–æ–ª–Ω–æ–µ –∏–º—è" required />
        <FormInput name="password" label="–ü–∞—Ä–æ–ª—å" type="password" required />
        <FormInput name="confirmPassword" label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" type="password" required />

        <Button loading={form.formState.isSubmitting} className="h-12 text-base" type="submit">
          –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        </Button>
      </form>
    </FormProvider>
  );
};
